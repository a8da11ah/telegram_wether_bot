This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.dockerignore
config.py
data_store.py
docker-compose.yml
Dockerfile
handlers/callback_handlers.py
handlers/command_handlers.py
localization.py
main.py
requirements.txt
utils.py
weather_api.py
weather_bot.py
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".dockerignore">
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
.env.example
.git/
.gitignore
README.md
.pytest_cache/
.coverage
.vscode/
.idea/
</file>

<file path="config.py">
import os
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

if not TELEGRAM_BOT_TOKEN or not WEATHER_API_KEY:
    raise ValueError("Missing required environment variables! Please set TELEGRAM_BOT_TOKEN and WEATHER_API_KEY in your .env file.")

# API URLs
WEATHER_API_URL = "https://api.openweathermap.org/data/2.5/weather"
FORECAST_API_URL = "https://api.openweathermap.org/data/2.5/forecast"
GEOCODING_API_URL = "https://api.openweathermap.org/geo/1.0/direct"

# Other configurations
DEFAULT_UNIT = "metric"
DEFAULT_LANGUAGE = "en"
MAX_FAVORITES = 10
MAX_COMPARE_CITIES = 4
REQUEST_TIMEOUT = 10
</file>

<file path="data_store.py">
import json
import logging
from typing import Dict, List
from dataclasses import dataclass, asdict

logger = logging.getLogger(__name__)

@dataclass
class UserPreferences:
    """User preferences data class"""
    unit: str = "metric"
    language: str = "en"
    favorites: List[str] = None
    default_city: str = None
    
    def __post_init__(self):
        if self.favorites is None:
            self.favorites = []

class UserDataStore:
    def __init__(self, filename: str = 'user_preferences.json'):
        self.filename = filename
        self.user_preferences: Dict[int, UserPreferences] = {}
        self.load_user_data()

    def load_user_data(self):
        """Load user preferences from file."""
        try:
            if os.path.exists(self.filename):
                with open(self.filename, 'r') as f:
                    data = json.load(f)
                    for user_id, prefs_data in data.items():
                        # Ensure favorites is a list if it was null/None in JSON
                        if 'favorites' in prefs_data and prefs_data['favorites'] is None:
                            prefs_data['favorites'] = []
                        self.user_preferences[int(user_id)] = UserPreferences(**prefs_data)
            logger.info(f"Loaded preferences for {len(self.user_preferences)} users.")
        except Exception as e:
            logger.error(f"Error loading user data from {self.filename}: {e}")

    def save_user_data(self):
        """Save user preferences to file."""
        try:
            data_to_save = {str(user_id): asdict(prefs) for user_id, prefs in self.user_preferences.items()}
            with open(self.filename, 'w') as f:
                json.dump(data_to_save, f, indent=2)
            logger.info(f"Saved preferences for {len(self.user_preferences)} users.")
        except Exception as e:
            logger.error(f"Error saving user data to {self.filename}: {e}")

    def get_user_prefs(self, user_id: int) -> UserPreferences:
        """Get user preferences or create default if not exists."""
        if user_id not in self.user_preferences:
            self.user_preferences[user_id] = UserPreferences()
            self.save_user_data() # Save new user's default prefs immediately
        return self.user_preferences[user_id]

    def reset_user_prefs(self, user_id: int):
        """Resets user preferences to default."""
        self.user_preferences[user_id] = UserPreferences()
        self.save_user_data()
</file>

<file path="handlers/callback_handlers.py">
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from data_store import UserDataStore
from localization import get_localized_message
from handlers.command_handlers import send_current_weather, settings_command # Import settings_command to reuse it
from config import MAX_FAVORITES # Also need to access MAX_FAVORITES here

logger = logging.getLogger(__name__)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle inline keyboard callbacks."""
    query = update.callback_query
    await query.answer() # Acknowledge the callback query
    
    data = query.data
    user_id = update.effective_user.id
    user_data_store: UserDataStore = context.bot_data['user_data_store']
    weather_api_client = context.bot_data['weather_api_client']
    prefs = user_data_store.get_user_prefs(user_id)
    
    if data.startswith("weather_"):
        city = data.replace("weather_", "")
        await send_current_weather(update, city, prefs, weather_api_client, edit_message=True)
    
    elif data.startswith("addfav_"):
        city = data.replace("addfav_", "")
        if city.lower() not in [fav.lower() for fav in prefs.favorites]:
            prefs.favorites.append(city)
            user_data_store.save_user_data()
            await query.edit_message_text(get_localized_message(prefs.language, "added_favorite", city=city))
        else:
            await query.edit_message_text(get_localized_message(prefs.language, "already_favorite", city=city))
        # Optionally, refresh the message or go back to main menu

    elif data == "toggle_units":
        prefs.unit = "imperial" if prefs.unit == "metric" else "metric"
        user_data_store.save_user_data()
        await settings_command(update, context) # Re-send settings menu with updated unit
    
    elif data == "choose_language":
        keyboard = [
            [InlineKeyboardButton(get_localized_message(prefs.language, "english"), callback_data="set_lang_en")],
            [InlineKeyboardButton(get_localized_message(prefs.language, "arabic"), callback_data="set_lang_ar")],
            [InlineKeyboardButton(get_localized_message(prefs.language, "manage_favorites_back"), callback_data="back_to_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            get_localized_message(prefs.language, "choose_language"),
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    
    elif data.startswith("set_lang_"):
        lang_code = data.replace("set_lang_", "")
        prefs.language = lang_code
        user_data_store.save_user_data()
        language_name = get_localized_message(prefs.language, lang_code)
        await query.edit_message_text(get_localized_message(prefs.language, "language_set", language_name=language_name))
        await settings_command(update, context) # Go back to main settings menu
        
    elif data == "set_default_city":
        await query.edit_message_text(
            get_localized_message(prefs.language, "set_default_city_instructions"),
            parse_mode='HTML'
        )
    
    elif data == "manage_favorites":
        if not prefs.favorites:
            await query.edit_message_text(
                get_localized_message(prefs.language, "no_favorites"),
                parse_mode='HTML'
            )
            return
        
        keyboard = []
        for city in prefs.favorites:
            keyboard.append([InlineKeyboardButton(f"üóëÔ∏è Remove {city}", callback_data=f"removefav_callback_{city}")])
        
        keyboard.append([InlineKeyboardButton(get_localized_message(prefs.language, "manage_favorites_back"), callback_data="back_to_settings")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            get_localized_message(prefs.language, "manage_favorites_menu"),
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    
    elif data.startswith("removefav_callback_"):
        city = data.replace("removefav_callback_", "")
        if city in prefs.favorites:
            prefs.favorites.remove(city)
            user_data_store.save_user_data()
            await query.edit_message_text(get_localized_message(prefs.language, "removed_favorite", city=city))
            await handle_callback(update, context) # Refresh the manage favorites list
        else:
            await query.edit_message_text(get_localized_message(prefs.language, "not_in_favorites", city=city))
    
    elif data == "back_to_settings":
        await settings_command(update, context)
    
    elif data == "reset_settings":
        user_data_store.reset_user_prefs(user_id)
        await query.edit_message_text(get_localized_message(prefs.language, "reset_settings_confirm"))
    
    # Handle help menu callbacks (from /start)
    elif data.startswith("help_"):
        help_type = data.replace("help_", "")
        # For simplicity, these just send a generic help message.
        # You could expand this to send specific help for each section.
        await query.edit_message_text(get_localized_message(prefs.language, "help"), parse_mode='HTML')
</file>

<file path="handlers/command_handlers.py">
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from data_store import UserDataStore, UserPreferences
from localization import get_localized_message
from weather_api import WeatherAPI
from utils import format_weather_message, format_forecast_message, get_weather_emoji
from config import MAX_FAVORITES, MAX_COMPARE_CITIES

logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command."""
    user_id = update.effective_user.id
    user_data_store: UserDataStore = context.bot_data['user_data_store']
    prefs = user_data_store.get_user_prefs(user_id)
    
    keyboard = [
        [InlineKeyboardButton(get_localized_message(prefs.language, "current_weather_button"), callback_data="help_weather")],
        [InlineKeyboardButton(get_localized_message(prefs.language, "five_day_forecast_button"), callback_data="help_forecast")],
        [InlineKeyboardButton(get_localized_message(prefs.language, "search_cities_button"), callback_data="help_search")],
        [InlineKeyboardButton(get_localized_message(prefs.language, "favorites_button"), callback_data="help_favorites")],
        [InlineKeyboardButton(get_localized_message(prefs.language, "settings_button"), callback_data="help_settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = get_localized_message(prefs.language, "welcome")
    await update.message.reply_text(welcome_message, parse_mode='HTML', reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /help command."""
    user_id = update.effective_user.id
    user_data_store: UserDataStore = context.bot_data['user_data_store']
    prefs = user_data_store.get_user_prefs(user_id)
    help_message = get_localized_message(prefs.language, "help")
    await update.message.reply_text(help_message, parse_mode='HTML')

async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /weather command."""
    user_id = update.effective_user.id
    user_data_store: UserDataStore = context.bot_data['user_data_store']
    weather_api_client: WeatherAPI = context.bot_data['weather_api_client']
    prefs = user_data_store.get_user_prefs(user_id)
    
    city = None
    if context.args:
        city = " ".join(context.args)
    elif prefs.default_city:
        city = prefs.default_city
    
    if not city:
        await update.message.reply_text(get_localized_message(prefs.language, "specify_city_weather"), parse_mode='HTML')
        return

    await send_current_weather(update, city, prefs, weather_api_client)

async def forecast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /forecast command."""
    user_id = update.effective_user.id
    user_data_store: UserDataStore = context.bot_data['user_data_store']
    weather_api_client: WeatherAPI = context.bot_data['weather_api_client']
    prefs = user_data_store.get_user_prefs(user_id)
    
    city = None
    if context.args:
        city = " ".join(context.args)
    elif prefs.default_city:
        city = prefs.default_city
    
    if not city:
        await update.message.reply_text(get_localized_message(prefs.language, "specify_city_forecast"), parse_mode='HTML')
        return
    
    await send_five_day_forecast(update, city, prefs, weather_api_client)

async def search_cities(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Search for cities."""
    user_id = update.effective_user.id
    user_data_store: UserDataStore = context.bot_data['user_data_store']
    weather_api_client: WeatherAPI = context.bot_data['weather_api_client']
    prefs = user_data_store.get_user_prefs(user_id)

    if not context.args:
        await update.message.reply_text(get_localized_message(prefs.language, "specify_query_search"), parse_mode='HTML')
        return
    
    query = " ".join(context.args)
    await update.message.reply_chat_action(action="typing")
    
    city_data = await weather_api_client.get_city_coordinates(query)
    
    if not city_data:
        await update.message.reply_text(get_localized_message(prefs.language, "error_searching_cities"))
        return
    
    if not city_data:
        await update.message.reply_text(get_localized_message(prefs.language, "no_cities_found_search", query=query))
        return
    
    keyboard = []
    city_list_str = ""
    
    for i, city_info in enumerate(city_data[:8], 1): # Limit to 8 results
        name = city_info['name']
        country = city_info.get('country', '')
        state = city_info.get('state', '')
        
        full_name = f"{name}, {country}"
        if state and state != name:
            full_name = f"{name}, {state}, {country}"
        
        city_list_str += f"{i}. {full_name}\n"
        keyboard.append([InlineKeyboardButton(f"üå§Ô∏è {full_name}", callback_data=f"weather_{name}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = get_localized_message(prefs.language, "cities_matching_search", query=query, city_list=city_list_str)
    await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)

async def favorites_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show favorite cities."""
    user_id = update.effective_user.id
    user_data_store: UserDataStore = context.bot_data['user_data_store']
    prefs = user_data_store.get_user_prefs(user_id)
    
    if not prefs.favorites:
        await update.message.reply_text(get_localized_message(prefs.language, "no_favorites"), parse_mode='HTML')
        return
    
    keyboard = []
    for city in prefs.favorites[:MAX_FAVORITES]:
        keyboard.append([InlineKeyboardButton(f"üå§Ô∏è {city}", callback_data=f"weather_{city}")])
    
    keyboard.append([InlineKeyboardButton(get_localized_message(prefs.language, "manage_favorites_button"), callback_data="manage_favorites")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = get_localized_message(prefs.language, "favorites_list", count=len(prefs.favorites))
    await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)

async def add_favorite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Add city to favorites."""
    user_id = update.effective_user.id
    user_data_store: UserDataStore = context.bot_data['user_data_store']
    weather_api_client: WeatherAPI = context.bot_data['weather_api_client']
    prefs = user_data_store.get_user_prefs(user_id)

    if not context.args:
        await update.message.reply_text(get_localized_message(prefs.language, "specify_city_addfav"), parse_mode='HTML')
        return
    
    city = " ".join(context.args)
    
    if not await weather_api_client.verify_city_exists(city, prefs.language):
        await update.message.reply_text(get_localized_message(prefs.language, "city_not_found", city=city))
        return
    
    if city.lower() not in [fav.lower() for fav in prefs.favorites]:
        prefs.favorites.append(city)
        user_data_store.save_user_data()
        await update.message.reply_text(get_localized_message(prefs.language, "added_favorite", city=city))
    else:
        await update.message.reply_text(get_localized_message(prefs.language, "already_favorite", city=city))

async def remove_favorite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Remove city from favorites."""
    user_id = update.effective_user.id
    user_data_store: UserDataStore = context.bot_data['user_data_store']
    prefs = user_data_store.get_user_prefs(user_id)

    if not context.args:
        await update.message.reply_text(get_localized_message(prefs.language, "specify_city_removefav"), parse_mode='HTML')
        return
    
    city_to_remove = " ".join(context.args)
    
    found = False
    for fav in prefs.favorites[:]: # Iterate over a copy
        if fav.lower() == city_to_remove.lower():
            prefs.favorites.remove(fav)
            user_data_store.save_user_data()
            await update.message.reply_text(get_localized_message(prefs.language, "removed_favorite", city=fav))
            found = True
            break
    
    if not found:
        await update.message.reply_text(get_localized_message(prefs.language, "not_in_favorites", city=city_to_remove))

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show settings menu."""
    user_id = update.effective_user.id
    user_data_store: UserDataStore = context.bot_data['user_data_store']
    prefs = user_data_store.get_user_prefs(user_id)
    
    unit_name = get_localized_message(prefs.language, "units_celsius") if prefs.unit == "metric" else get_localized_message(prefs.language, "units_fahrenheit")
    language_name = get_localized_message(prefs.language, prefs.language)
    default_city_name = prefs.default_city or get_localized_message(prefs.language, "default_city_not_set")

    keyboard = [
        [InlineKeyboardButton(get_localized_message(prefs.language, "units_toggle_button", unit_name=unit_name), callback_data="toggle_units")],
        [InlineKeyboardButton(get_localized_message(prefs.language, "language_toggle_button", language_name=language_name), callback_data="choose_language")],
        [InlineKeyboardButton(get_localized_message(prefs.language, "default_city_button", city_name=default_city_name), callback_data="set_default_city")],
        [InlineKeyboardButton(get_localized_message(prefs.language, "manage_favorites_button"), callback_data="manage_favorites")],
        [InlineKeyboardButton(get_localized_message(prefs.language, "reset_settings_button"), callback_data="reset_settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = get_localized_message(
        prefs.language, 
        "settings_menu", 
        unit=unit_name, 
        language=language_name, 
        default_city=default_city_name, 
        fav_count=len(prefs.favorites)
    )
    if update.callback_query: # If triggered by a callback, edit message
        await update.callback_query.edit_message_text(message, parse_mode='HTML', reply_markup=reply_markup)
    else: # If triggered by command
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)

async def weather_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show weather alerts for a city."""
    user_id = update.effective_user.id
    user_data_store: UserDataStore = context.bot_data['user_data_store']
    weather_api_client: WeatherAPI = context.bot_data['weather_api_client']
    prefs = user_data_store.get_user_prefs(user_id)
    
    city = None
    if context.args:
        city = " ".join(context.args)
    elif prefs.default_city:
        city = prefs.default_city
    
    if not city:
        await update.message.reply_text(get_localized_message(prefs.language, "specify_city_alerts"), parse_mode='HTML')
        return
    
    await update.message.reply_chat_action(action="typing")
    weather_data = await weather_api_client.get_current_weather(city, prefs.unit, prefs.language)

    if not weather_data:
        if weather_data and weather_data.get("error") == "city_not_found":
            await update.message.reply_text(get_localized_message(prefs.language, "city_not_found", city=city))
        else:
            await update.message.reply_text(get_localized_message(prefs.language, "error_fetching_alerts"))
        return
    
    alerts = []
    
    temp = weather_data['main']['temp']
    humidity = weather_data['main']['humidity']
    wind_speed = weather_data.get('wind', {}).get('speed', 0)
    weather_id = weather_data['weather'][0]['id']
    
    if prefs.unit == 'metric':
        if temp > 35:
            alerts.append(get_localized_message(prefs.language, "extreme_heat_warning"))
        elif temp < -10:
            alerts.append(get_localized_message(prefs.language, "extreme_cold_warning"))
        if wind_speed > 10:
            alerts.append(get_localized_message(prefs.language, "high_wind_alert"))
    else: # imperial
        if temp > 95:
            alerts.append(get_localized_message(prefs.language, "extreme_heat_warning"))
        elif temp < 14:
            alerts.append(get_localized_message(prefs.language, "extreme_cold_warning"))
        if wind_speed > 22:
            alerts.append(get_localized_message(prefs.language, "high_wind_alert"))
    
    if humidity > 85:
        alerts.append(get_localized_message(prefs.language, "high_humidity_alert"))
    
    if weather_id < 300:
        alerts.append(get_localized_message(prefs.language, "thunderstorm_alert"))
    elif weather_id < 600 and weather_id >= 500:
        alerts.append(get_localized_message(prefs.language, "heavy_rain_alert"))
    elif weather_id < 700 and weather_id >= 600:
        alerts.append(get_localized_message(prefs.language, "snow_alert"))
    
    city_name = f"{weather_data['name']}, {weather_data['sys']['country']}"
    
    if alerts:
        alerts_list_str = "\n".join(f"‚Ä¢ {alert}" for alert in alerts)
        message = get_localized_message(prefs.language, "alerts_for_city", city=city_name, alerts_list=alerts_list_str, temp=f"{temp}¬∞{'C' if prefs.unit == 'metric' else 'F'}")
    else:
        message = get_localized_message(prefs.language, "no_alerts", city=city_name)
    
    await update.message.reply_text(message, parse_mode='HTML')

async def compare_cities(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Compare weather between cities."""
    user_id = update.effective_user.id
    user_data_store: UserDataStore = context.bot_data['user_data_store']
    weather_api_client: WeatherAPI = context.bot_data['weather_api_client']
    prefs = user_data_store.get_user_prefs(user_id)

    if not context.args:
        await update.message.reply_text(get_localized_message(prefs.language, "specify_cities_compare"), parse_mode='HTML')
        return
    
    cities_input = " ".join(context.args)
    cities = [city.strip() for city in cities_input.split(',')]
    
    if len(cities) < 2:
        await update.message.reply_text(get_localized_message(prefs.language, "not_enough_cities"), parse_mode='HTML')
        return
    
    if len(cities) > MAX_COMPARE_CITIES:
        await update.message.reply_text(get_localized_message(prefs.language, "too_many_cities"))
        cities = cities[:MAX_COMPARE_CITIES]
    
    await update.message.reply_chat_action(action="typing")
    
    weather_data_list = []
    for city in cities:
        data = await weather_api_client.get_current_weather(city, prefs.unit, prefs.language)
        if data and not data.get("error"):
            weather_data_list.append(data)
        else:
            await update.message.reply_text(get_localized_message(prefs.language, "city_not_found", city=city))
            return # Stop comparison if any city is not found
    
    if not weather_data_list:
        await update.message.reply_text(get_localized_message(prefs.language, "error_fetching_data_any_cities"))
        return
    
    unit_symbol = "¬∞C" if prefs.unit == "metric" else "¬∞F"
    
    message = get_localized_message(prefs.language, "weather_comparison_title")
    
    # Temperature comparison
    temps = [(data['name'], data['main']['temp']) for data in weather_data_list]
    temps.sort(key=lambda x: x[1], reverse=True)
    
    message += get_localized_message(prefs.language, "temperature_comparison", unit_symbol=unit_symbol)
    for i, (name, temp) in enumerate(temps, 1):
        emoji = "üî•" if i == 1 else "üßä" if i == len(temps) else "üå°Ô∏è"
        message += f"{i}. {emoji} {name}: {temp:.1f}{unit_symbol}\n"
    
    message += "\n"
    
    # Humidity comparison
    humidities = [(data['name'], data['main']['humidity']) for data in weather_data_list]
    humidities.sort(key=lambda x: x[1], reverse=True)
    
    message += get_localized_message(prefs.language, "humidity_comparison")
    for i, (name, humidity) in enumerate(humidities, 1):
        emoji = "üíß" if i == 1 else "üèúÔ∏è" if i == len(humidities) else "üí®"
        message += f"{i}. {emoji} {name}: {humidity}%\n"
    
    message += "\n"
    
    # Weather conditions
    message += get_localized_message(prefs.language, "current_conditions_comparison")
    for data_item in weather_data_list:
        name = data_item['name']
        condition = data_item['weather'][0]['description'].title()
        emoji = get_weather_emoji(data_item['weather'][0]['id'])
        message += f"{emoji} {name}: {condition}\n"
    
    # Find extremes
    message += get_localized_message(prefs.language, "highlights_comparison")
    hottest = max(weather_data_list, key=lambda x: x['main']['temp'])
    coldest = min(weather_data_list, key=lambda x: x['main']['temp'])
    most_humid = max(weather_data_list, key=lambda x: x['main']['humidity'])
    
    message += get_localized_message(prefs.language, "hottest", city=hottest['name'], temp=hottest['main']['temp'], unit_symbol=unit_symbol) + "\n"
    message += get_localized_message(prefs.language, "coldest", city=coldest['name'], temp=coldest['main']['temp'], unit_symbol=unit_symbol) + "\n"
    message += get_localized_message(prefs.language, "most_humid", city=most_humid['name'], humidity=most_humid['main']['humidity'])
    
    await update.message.reply_text(message, parse_mode='HTML')

async def weather_map(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Provide weather map link."""
    user_id = update.effective_user.id
    user_data_store: UserDataStore = context.bot_data['user_data_store']
    weather_api_client: WeatherAPI = context.bot_data['weather_api_client']
    prefs = user_data_store.get_user_prefs(user_id)

    if not context.args:
        await update.message.reply_text(get_localized_message(prefs.language, "specify_city_map"), parse_mode='HTML')
        return
    
    city = " ".join(context.args)
    
    await update.message.reply_chat_action(action="typing")
    geo_data = await weather_api_client.get_city_coordinates(city)
    
    if not geo_data:
        await update.message.reply_text(get_localized_message(prefs.language, "error_generating_map"))
        return
    
    if not geo_data:
        await update.message.reply_text(get_localized_message(prefs.language, "city_not_found", city=city))
        return
    
    lat = geo_data[0]['lat']
    lon = geo_data[0]['lon']
    name = geo_data[0]['name']
    country = geo_data[0].get('country', '')
    
    openweather_map = f"https://openweathermap.org/weathermap?basemap=map&cities=true&layer=temperature&lat={lat}&lon={lon}&zoom=10"
    Maps = f"https://www.google.com/maps/@{lat},{lon},10z"
    
    keyboard = [
        [InlineKeyboardButton(get_localized_message(prefs.language, "openweather_map_button"), url=openweather_map)],
        [InlineKeyboardButton(get_localized_message(prefs.language, "Maps_button"), url=Maps)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = get_localized_message(prefs.language, "map_links", city=f"{name}, {country}")
    await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)

async def handle_city_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle direct city name messages (non-command)."""
    city = update.message.text.strip().strip('"\'')
    user_id = update.effective_user.id
    user_data_store: UserDataStore = context.bot_data['user_data_store']
    weather_api_client: WeatherAPI = context.bot_data['weather_api_client']
    prefs = user_data_store.get_user_prefs(user_id)
    
    # Auto-add frequently searched cities to favorites
    if city.lower() not in [fav.lower() for fav in prefs.favorites] and len(prefs.favorites) < MAX_FAVORITES:
        if await weather_api_client.verify_city_exists(city, prefs.language):
            keyboard = [[InlineKeyboardButton(get_localized_message(prefs.language, "add_to_favorites_button"), callback_data=f"addfav_{city}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await send_current_weather(update, city, prefs, weather_api_client, suggest_favorite=reply_markup)
        else:
            await send_current_weather(update, city, prefs, weather_api_client)
    else:
        await send_current_weather(update, city, prefs, weather_api_client)

# Helper functions that interact with API and send messages
async def send_current_weather(update: Update, city: str, prefs: UserPreferences, weather_api_client: WeatherAPI, edit_message: bool = False, suggest_favorite=None):
    """Fetches and sends current weather data."""
    if not edit_message:
        await update.message.reply_chat_action(action="typing")
    
    weather_data = await weather_api_client.get_current_weather(city, prefs.unit, prefs.language)

    if not weather_data:
        message = get_localized_message(prefs.language, "api_request_failed")
        if weather_data and weather_data.get("error") == "city_not_found":
            message = get_localized_message(prefs.language, "city_not_found_weather", city=city)
        
        if edit_message:
            await update.callback_query.edit_message_text(message)
        else:
            await update.message.reply_text(message)
        return

    weather_message = format_weather_message(weather_data, prefs.language, prefs.unit)
    
    if edit_message:
        await update.callback_query.edit_message_text(weather_message, parse_mode='HTML')
    else:
        await update.message.reply_text(weather_message, parse_mode='HTML', reply_markup=suggest_favorite)

async def send_five_day_forecast(update: Update, city: str, prefs: UserPreferences, weather_api_client: WeatherAPI):
    """Fetches and sends 5-day weather forecast."""
    await update.message.reply_chat_action(action="typing")
    
    forecast_data = await weather_api_client.get_five_day_forecast(city, prefs.unit, prefs.language)

    if not forecast_data:
        message = get_localized_message(prefs.language, "error_fetching_forecast")
        if forecast_data and forecast_data.get("error") == "city_not_found":
            message = get_localized_message(prefs.language, "city_not_found", city=city)
        
        await update.message.reply_text(message)
        return

    forecast_message = format_forecast_message(forecast_data, prefs.language, prefs.unit)
    await update.message.reply_text(forecast_message, parse_mode='HTML')
</file>

<file path="localization.py">
MESSAGES = {
    "en": {
        "welcome": "üå§Ô∏è <b>Welcome to Advanced Weather Bot!</b> üå§Ô∏è\n\nI'm your comprehensive weather assistant with many features:\n\nüîπ Current weather for any city\nüîπ 5-day detailed forecasts\nüîπ City search and suggestions\nüîπ Favorite locations\nüîπ Weather alerts\nüîπ City comparisons\nüîπ Customizable units & settings\n\nChoose a category below or type a city name to get started!",
        "help": "üÜò <b>Weather Bot Commands</b>\n\nüìç <b>Weather Commands:</b>\n‚Ä¢ <code>/weather [city]</code> - Current weather\n‚Ä¢ <code>/forecast [city]</code> - 5-day forecast\n‚Ä¢ <code>/alerts [city]</code> - Weather alerts\n\nüîç <b>Search & Discovery:</b>\n‚Ä¢ <code>/search [query]</code> - Find cities\n‚Ä¢ <code>/map [city]</code> - Weather map link\n‚Ä¢ <code>/compare city1,city2</code> - Compare cities\n\n‚≠ê <b>Favorites:</b>\n‚Ä¢ <code>/favorites</code> - Show favorite cities\n‚Ä¢ <code>/addfav [city]</code> - Add to favorites\n‚Ä¢ <code>/removefav [city]</code> - Remove favorite\n\n‚öôÔ∏è <b>Settings:</b>\n‚Ä¢ <code>/settings</code> - Change preferences\n\nüí° <b>Tips:</b>\n‚Ä¢ Just type a city name for quick weather\n‚Ä¢ Use quotes for cities with spaces: 'New York'\n‚Ä¢ Set a default city in settings",
        "specify_city_weather": "Please specify a city! Usage: <code>/weather [city]</code>\nExample: <code>/weather London</code>\nOr set a default city in /settings",
        "specify_city_forecast": "Please specify a city! Usage: <code>/forecast [city]</code>\nExample: <code>/forecast Tokyo</code>",
        "specify_query_search": "Please provide a search query! Usage: <code>/search [query]</code>\nExample: <code>/search paris</code>",
        "no_favorites": "You don't have any favorite cities yet!\nAdd some using <code>/addfav [city]</code>",
        "favorites_list": "‚≠ê <b>Your Favorite Cities ({count})</b>\n\nClick on any city to get current weather:",
        "specify_city_addfav": "Please specify a city! Usage: <code>/addfav [city]</code>",
        "city_not_found": "üö´ City '{city}' not found. Please check the spelling.",
        "added_favorite": "‚≠ê Added '{city}' to your favorites!",
        "already_favorite": "'{city}' is already in your favorites!",
        "specify_city_removefav": "Please specify a city! Usage: <code>/removefav [city]</code>",
        "removed_favorite": "üóëÔ∏è Removed '{city}' from favorites!",
        "not_in_favorites": "'{city}' is not in your favorites!",
        "settings_menu": "‚öôÔ∏è <b>Settings</b>\n\nüå°Ô∏è Temperature Unit: {unit}\nüåê Language: {language}\nüè† Default City: {default_city}\n‚≠ê Favorite Cities: {fav_count}\n\nClick the buttons below to change settings:",
        "specify_city_alerts": "Please specify a city! Usage: <code>/alerts [city]</code>",
        "alerts_for_city": "‚ö†Ô∏è <b>Weather Alerts for {city}</b>\n\n{alerts_list}\n\nüå°Ô∏è Current temp: {temp}",
        "no_alerts": "‚úÖ <b>No Weather Alerts for {city}</b>\n\nCurrent conditions are normal.",
        "error_fetching_alerts": "‚ùå Could not fetch weather alerts. Please try again later.",
        "specify_cities_compare": "Please specify cities to compare!\nUsage: <code>/compare city1,city2</code>\nExample: <code>/compare London,Paris</code>",
        "not_enough_cities": "Please specify at least 2 cities separated by commas!\nExample: <code>/compare London,Paris</code>",
        "too_many_cities": "You can compare up to 4 cities at once!",
        "error_comparing_weather": "‚ùå Could not compare weather data. Please try again later.",
        "specify_city_map": "Please specify a city! Usage: <code>/map [city]</code>",
        "error_generating_map": "‚ùå Could not generate map links. Please try again later.",
        "map_links": "üó∫Ô∏è <b>Weather Maps for {city}</b>\n\nClick the links below to view interactive weather maps:",
        "no_cities_found_search": "üö´ No cities found matching '{query}'",
        "cities_matching_search": "üîç <b>Cities matching '{query}':</b>\n\n{city_list}",
        "error_searching_cities": "‚ùå Could not search for cities. Please try again later.",
        "request_timeout": "‚è∞ Request timeout. Please try again later.",
        "api_request_failed": "‚ùå Sorry, I couldn't fetch weather data right now. Please try again later.",
        "unexpected_error": "‚ùå An unexpected error occurred. Please try again.",
        "city_not_found_weather": "üö´ City '{city}' not found. Please check the spelling and try again.",
        "error_fetching_forecast": "‚ùå Could not fetch forecast data. Please try again later.",
        "units_celsius": "Celsius (¬∞C)",
        "units_fahrenheit": "Fahrenheit (¬∞F)",
        "default_city_not_set": "Not set",
        "set_default_city_instructions": "üè† To set a default city, use the command:\n<code>/addfav [city]</code> then come back to settings.\n\nOr just type a city name and I'll remember it!",
        "manage_favorites_menu": "‚≠ê <b>Manage Favorite Cities</b>\n\nClick to remove a city:",
        "reset_settings_confirm": "‚úÖ All settings have been reset to default!",
        "manage_favorites_back": "‚¨ÖÔ∏è Back to Settings",
        "add_to_favorites_button": "‚≠ê Add to Favorites",
        "manage_favorites_button": "‚öôÔ∏è Manage Favorites",
        "openweather_map_button": "üó∫Ô∏è OpenWeather Map",
        "Maps_button": "üìç Google Maps",
        "temperature_comparison": "üå°Ô∏è <b>Temperature ({unit_symbol})</b>\n",
        "humidity_comparison": "üíß <b>Humidity (%)</b>\n",
        "current_conditions_comparison": "‚òÅÔ∏è <b>Current Conditions</b>\n",
        "highlights_comparison": "\nüèÖ <b>Highlights</b>\n",
        "hottest": "üî• Hottest: {city} ({temp:.1f}{unit_symbol})",
        "coldest": "üßä Coldest: {city} ({temp:.1f}{unit_symbol})",
        "most_humid": "üíß Most Humid: {city} ({humidity}%)",
        "weather_comparison_title": "üèÜ <b>Weather Comparison</b>\n\n",
        "units_toggle_button": "üå°Ô∏è Units: {unit_name}",
        "language_toggle_button": "üåê Language: {language_name}",
        "default_city_button": "üè† Default City: {city_name}",
        "reset_settings_button": "üóëÔ∏è Reset All Settings",
        "choose_language": "üåê <b>Choose your language:</b>",
        "language_set": "üåê Language set to {language_name}!",
        "english": "English",
        "arabic": "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©",
        "current_weather_button": "üå§Ô∏è Current Weather",
        "five_day_forecast_button": "üìä 5-Day Forecast",
        "search_cities_button": "üîç Search Cities",
        "favorites_button": "‚≠ê Favorites",
        "settings_button": "‚öôÔ∏è Settings",
        "weather_in_city": "Current Weather in {city}, {country}",
        "temperature": "Temperature",
        "feels_like": "Feels like",
        "humidity": "Humidity",
        "pressure": "Pressure",
        "wind": "Wind",
        "cloudiness": "Cloudiness",
        "visibility": "Visibility",
        "conditions": "Conditions",
        "sunrise": "Sunrise",
        "sunset": "Sunset",
        "meters_per_second": "m/s",
        "miles_per_hour": "mph",
        "forecast_for_city": "5-Day Forecast for {city}, {country}",
        "extreme_heat_warning": "Extreme Heat Warning!",
        "extreme_cold_warning": "Extreme Cold Warning!",
        "high_wind_alert": "High Wind Alert!",
        "high_humidity_alert": "High Humidity Alert!",
        "thunderstorm_alert": "Thunderstorm Alert!",
        "heavy_rain_alert": "Heavy Rain Alert!",
        "snow_alert": "Snow Alert!",
        "error_fetching_data_any_cities": "‚ùå Could not fetch weather data for some cities. Please try again later."
    },
    "ar": {
        "welcome": "üå§Ô∏è <b>ÿ£ŸáŸÑÿßŸã ÿ®ŸÉ ŸÅŸä ÿ®Ÿàÿ™ ÿßŸÑÿ∑ŸÇÿ≥ ÿßŸÑŸÖÿ™ŸÇÿØŸÖ!</b> üå§Ô∏è\n\nÿ£ŸÜÿß ŸÖÿ≥ÿßÿπÿØŸÉ ÿßŸÑÿ¥ÿßŸÖŸÑ ŸÑŸÑÿ∑ŸÇÿ≥ ŸÖÿπ ÿßŸÑÿπÿØŸäÿØ ŸÖŸÜ ÿßŸÑŸÖŸäÿ≤ÿßÿ™:\n\nüîπ ÿßŸÑÿ∑ŸÇÿ≥ ÿßŸÑÿ≠ÿßŸÑŸä ŸÑÿ£Ÿä ŸÖÿØŸäŸÜÿ©\nüîπ ÿ™ŸàŸÇÿπÿßÿ™ ŸÖŸÅÿµŸÑÿ© ŸÑŸÖÿØÿ© 5 ÿ£ŸäÿßŸÖ\nüîπ ÿ®ÿ≠ÿ´ ÿßŸÑŸÖÿØŸÜ ŸàÿßŸÇÿ™ÿ±ÿßÿ≠ÿßÿ™Ÿáÿß\nüîπ ÿßŸÑŸÖŸàÿßŸÇÿπ ÿßŸÑŸÖŸÅÿ∂ŸÑÿ©\nüîπ ÿ™ŸÜÿ®ŸäŸáÿßÿ™ ÿßŸÑÿ∑ŸÇÿ≥\nüîπ ŸÖŸÇÿßÿ±ŸÜÿ© ÿßŸÑŸÖÿØŸÜ\nüîπ Ÿàÿ≠ÿØÿßÿ™ Ÿàÿ•ÿπÿØÿßÿØÿßÿ™ ŸÇÿßÿ®ŸÑÿ© ŸÑŸÑÿ™ÿÆÿµŸäÿµ\n\nÿßÿÆÿ™ÿ± ŸÅÿ¶ÿ© ÿ£ÿØŸÜÿßŸá ÿ£Ÿà ÿßŸÉÿ™ÿ® ÿßÿ≥ŸÖ ŸÖÿØŸäŸÜÿ© ŸÑŸÑÿ®ÿØÿ°!",
        "help": "üÜò <b>ÿ£ŸàÿßŸÖÿ± ÿ®Ÿàÿ™ ÿßŸÑÿ∑ŸÇÿ≥</b>\n\nüìç <b>ÿ£ŸàÿßŸÖÿ± ÿßŸÑÿ∑ŸÇÿ≥:</b>\n‚Ä¢ <code>/weather [ŸÖÿØŸäŸÜÿ©]</code> - ÿßŸÑÿ∑ŸÇÿ≥ ÿßŸÑÿ≠ÿßŸÑŸä\n‚Ä¢ <code>/forecast [ŸÖÿØŸäŸÜÿ©]</code> - ÿ™ŸàŸÇÿπÿßÿ™ 5 ÿ£ŸäÿßŸÖ\n‚Ä¢ <code>/alerts [ŸÖÿØŸäŸÜÿ©]</code> - ÿ™ŸÜÿ®ŸäŸáÿßÿ™ ÿßŸÑÿ∑ŸÇÿ≥\n\nüîç <b>ÿßŸÑÿ®ÿ≠ÿ´ ŸàÿßŸÑÿßŸÉÿ™ÿ¥ÿßŸÅ:</b>\n‚Ä¢ <code>/search [ÿßÿ≥ÿ™ÿπŸÑÿßŸÖ]</code> - ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ŸÖÿØŸÜ\n‚Ä¢ <code>/map [ŸÖÿØŸäŸÜÿ©]</code> - ÿ±ÿßÿ®ÿ∑ ÿÆÿ±Ÿäÿ∑ÿ© ÿßŸÑÿ∑ŸÇÿ≥\n‚Ä¢ <code>/compare ŸÖÿØŸäŸÜÿ©1,ŸÖÿØŸäŸÜÿ©2</code> - ŸÖŸÇÿßÿ±ŸÜÿ© ÿßŸÑŸÖÿØŸÜ\n\n‚≠ê <b>ÿßŸÑŸÖŸÅÿ∂ŸÑÿ©:</b>\n‚Ä¢ <code>/favorites</code> - ÿπÿ±ÿ∂ ÿßŸÑŸÖÿØŸÜ ÿßŸÑŸÖŸÅÿ∂ŸÑÿ©\n‚Ä¢ <code>/addfav [ŸÖÿØŸäŸÜÿ©]</code> - ÿ•ÿ∂ÿßŸÅÿ© ÿ•ŸÑŸâ ÿßŸÑŸÖŸÅÿ∂ŸÑÿ©\n‚Ä¢ <code>/removefav [ŸÖÿØŸäŸÜÿ©]</code> - ÿ•ÿ≤ÿßŸÑÿ© ŸÖŸÜ ÿßŸÑŸÖŸÅÿ∂ŸÑÿ©\n\n‚öôÔ∏è <b>ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™:</b>\n‚Ä¢ <code>/settings</code> - ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑÿ™ŸÅÿ∂ŸäŸÑÿßÿ™\n\nüí° <b>ŸÜÿµÿßÿ¶ÿ≠:</b>\n‚Ä¢ ŸÅŸÇÿ∑ ÿßŸÉÿ™ÿ® ÿßÿ≥ŸÖ ŸÖÿØŸäŸÜÿ© ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑÿ∑ŸÇÿ≥ ÿßŸÑÿ≥ÿ±Ÿäÿπ\n‚Ä¢ ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿπŸÑÿßŸÖÿßÿ™ ÿßŸÑÿßŸÇÿ™ÿ®ÿßÿ≥ ŸÑŸÑŸÖÿØŸÜ ÿßŸÑÿ™Ÿä ÿ™ÿ≠ÿ™ŸàŸä ÿπŸÑŸâ ŸÖÿ≥ÿßŸÅÿßÿ™: 'ŸÜŸäŸàŸäŸàÿ±ŸÉ'\n‚Ä¢ ŸÇŸÖ ÿ®ÿ™ÿπŸäŸäŸÜ ŸÖÿØŸäŸÜÿ© ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ© ŸÅŸä ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™",
        "specify_city_weather": "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ™ÿ≠ÿØŸäÿØ ŸÖÿØŸäŸÜÿ©! ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ: <code>/weather [ŸÖÿØŸäŸÜÿ©]</code>\nŸÖÿ´ÿßŸÑ: <code>/weather ŸÑŸÜÿØŸÜ</code>\nÿ£Ÿà ŸÇŸÖ ÿ®ÿ™ÿπŸäŸäŸÜ ŸÖÿØŸäŸÜÿ© ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ© ŸÅŸä /settings",
        "specify_city_forecast": "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ™ÿ≠ÿØŸäÿØ ŸÖÿØŸäŸÜÿ©! ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ: <code>/forecast [ŸÖÿØŸäŸÜÿ©]</code>\nŸÖÿ´ÿßŸÑ: <code>/forecast ÿ∑ŸàŸÉŸäŸà</code>",
        "specify_query_search": "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ™ŸÇÿØŸäŸÖ ÿßÿ≥ÿ™ÿπŸÑÿßŸÖ ÿ®ÿ≠ÿ´! ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ: <code>/search [ÿßÿ≥ÿ™ÿπŸÑÿßŸÖ]</code>\nŸÖÿ´ÿßŸÑ: <code>/search ÿ®ÿßÿ±Ÿäÿ≥</code>",
        "no_favorites": "ŸÑŸäÿ≥ ŸÑÿØŸäŸÉ ÿ£Ÿä ŸÖÿØŸÜ ŸÖŸÅÿ∂ŸÑÿ© ÿ®ÿπÿØ!\nÿ£ÿ∂ŸÅ ÿ®ÿπÿ∂Ÿáÿß ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ <code>/addfav [ŸÖÿØŸäŸÜÿ©]</code>",
        "favorites_list": "‚≠ê <b>ŸÖÿØŸÜŸÉ ÿßŸÑŸÖŸÅÿ∂ŸÑÿ© ({count})</b>\n\nÿßŸÜŸÇÿ± ÿπŸÑŸâ ÿ£Ÿä ŸÖÿØŸäŸÜÿ© ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿßŸÑÿ∑ŸÇÿ≥ ÿßŸÑÿ≠ÿßŸÑŸä:",
        "specify_city_addfav": "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ™ÿ≠ÿØŸäÿØ ŸÖÿØŸäŸÜÿ©! ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ: <code>/addfav [ŸÖÿØŸäŸÜÿ©]</code>",
        "city_not_found": "üö´ ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ŸÖÿØŸäŸÜÿ© '{city}'. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ•ŸÖŸÑÿßÿ°.",
        "added_favorite": "‚≠ê ÿ™ŸÖÿ™ ÿ•ÿ∂ÿßŸÅÿ© '{city}' ÿ•ŸÑŸâ ŸÖŸÅÿ∂ŸÑÿßÿ™ŸÉ!",
        "already_favorite": "'{city}' ŸÖŸàÿ¨ŸàÿØÿ© ÿ®ÿßŸÑŸÅÿπŸÑ ŸÅŸä ŸÖŸÅÿ∂ŸÑÿßÿ™ŸÉ!",
        "specify_city_removefav": "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ™ÿ≠ÿØŸäÿØ ŸÖÿØŸäŸÜÿ©! ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ: <code>/removefav [ŸÖÿØŸäŸÜÿ©]</code>",
        "removed_favorite": "üóëÔ∏è ÿ™ŸÖÿ™ ÿ•ÿ≤ÿßŸÑÿ© '{city}' ŸÖŸÜ ÿßŸÑŸÖŸÅÿ∂ŸÑÿ©!",
        "not_in_favorites": "'{city}' ŸÑŸäÿ≥ÿ™ ŸÅŸä ŸÖŸÅÿ∂ŸÑÿßÿ™ŸÉ!",
        "settings_menu": "‚öôÔ∏è <b>ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™</b>\n\nüå°Ô∏è Ÿàÿ≠ÿØÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±ÿ©: {unit}\nüåê ÿßŸÑŸÑÿ∫ÿ©: {language}\nüè† ÿßŸÑŸÖÿØŸäŸÜÿ© ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ©: {default_city}\n‚≠ê ÿßŸÑŸÖÿØŸÜ ÿßŸÑŸÖŸÅÿ∂ŸÑÿ©: {fav_count}\n\nÿßŸÜŸÇÿ± ÿπŸÑŸâ ÿßŸÑÿ£ÿ≤ÿ±ÿßÿ± ÿ£ÿØŸÜÿßŸá ŸÑÿ™ÿ∫ŸäŸäÿ± ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™:",
        "specify_city_alerts": "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ™ÿ≠ÿØŸäÿØ ŸÖÿØŸäŸÜÿ©! ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ: <code>/alerts [ŸÖÿØŸäŸÜÿ©]</code>",
        "alerts_for_city": "‚ö†Ô∏è <b>ÿ™ŸÜÿ®ŸäŸáÿßÿ™ ÿßŸÑÿ∑ŸÇÿ≥ ŸÑŸÄ {city}</b>\n\n{alerts_list}\n\nüå°Ô∏è ÿØÿ±ÿ¨ÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±ÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ©: {temp}",
        "no_alerts": "‚úÖ <b>ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ™ŸÜÿ®ŸäŸáÿßÿ™ ÿ∑ŸÇÿ≥ ŸÑŸÄ {city}</b>\n\nÿßŸÑÿ∏ÿ±ŸàŸÅ ÿßŸÑÿ≠ÿßŸÑŸäÿ© ÿ∑ÿ®ŸäÿπŸäÿ©.",
        "error_fetching_alerts": "‚ùå ÿ™ÿπÿ∞ÿ± ÿ¨ŸÑÿ® ÿ™ŸÜÿ®ŸäŸáÿßÿ™ ÿßŸÑÿ∑ŸÇÿ≥. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ ŸÑÿßÿ≠ŸÇŸãÿß.",
        "specify_cities_compare": "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑŸÖÿØŸÜ ŸÑŸÑŸÖŸÇÿßÿ±ŸÜÿ©!\nÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ: <code>/compare ŸÖÿØŸäŸÜÿ©1,ŸÖÿØŸäŸÜÿ©2</code>\nŸÖÿ´ÿßŸÑ: <code>/compare ŸÑŸÜÿØŸÜ,ÿ®ÿßÿ±Ÿäÿ≥</code>",
        "not_enough_cities": "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ™ÿ≠ÿØŸäÿØ ŸÖÿØŸäŸÜÿ™ŸäŸÜ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ ŸÖŸÅÿµŸàŸÑÿ© ÿ®ŸÅŸàÿßÿµŸÑ!\nŸÖÿ´ÿßŸÑ: <code>/compare ŸÑŸÜÿØŸÜ,ÿ®ÿßÿ±Ÿäÿ≥</code>",
        "too_many_cities": "ŸäŸÖŸÉŸÜŸÉ ŸÖŸÇÿßÿ±ŸÜÿ© ŸÖÿß ŸäÿµŸÑ ÿ•ŸÑŸâ 4 ŸÖÿØŸÜ ŸÅŸä ŸàŸÇÿ™ Ÿàÿßÿ≠ÿØ!",
        "error_comparing_weather": "‚ùå ÿ™ÿπÿ∞ÿ± ŸÖŸÇÿßÿ±ŸÜÿ© ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ∑ŸÇÿ≥. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ ŸÑÿßÿ≠ŸÇŸãÿß.",
        "specify_city_map": "ÿßŸÑÿ±ÿ¨ÿßÿ° ÿ™ÿ≠ÿØŸäÿØ ŸÖÿØŸäŸÜÿ©! ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ: <code>/map [ŸÖÿØŸäŸÜÿ©]</code>",
        "error_generating_map": "‚ùå ÿ™ÿπÿ∞ÿ± ÿ•ŸÜÿ¥ÿßÿ° ÿ±Ÿàÿßÿ®ÿ∑ ÿßŸÑÿÆÿ±ÿßÿ¶ÿ∑. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ ŸÑÿßÿ≠ŸÇŸãÿß.",
        "map_links": "üó∫Ô∏è <b>ÿÆÿ±ÿßÿ¶ÿ∑ ÿßŸÑÿ∑ŸÇÿ≥ ŸÑŸÄ {city}</b>\n\nÿßŸÜŸÇÿ± ÿπŸÑŸâ ÿßŸÑÿ±Ÿàÿßÿ®ÿ∑ ÿ£ÿØŸÜÿßŸá ŸÑÿπÿ±ÿ∂ ÿÆÿ±ÿßÿ¶ÿ∑ ÿßŸÑÿ∑ŸÇÿ≥ ÿßŸÑÿ™ŸÅÿßÿπŸÑŸäÿ©:",
        "no_cities_found_search": "üö´ ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ŸÖÿØŸÜ ŸÖÿ∑ÿßÿ®ŸÇÿ© ŸÑŸÄ '{query}'",
        "cities_matching_search": "üîç <b>ÿßŸÑŸÖÿØŸÜ ÿßŸÑŸÖÿ∑ÿßÿ®ŸÇÿ© ŸÑŸÄ '{query}':</b>\n\n{city_list}",
        "error_searching_cities": "‚ùå ÿ™ÿπÿ∞ÿ± ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ŸÖÿØŸÜ. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ ŸÑÿßÿ≠ŸÇŸãÿß.",
        "request_timeout": "‚è∞ ÿßŸÜÿ™Ÿáÿ™ ŸÖŸáŸÑÿ© ÿßŸÑÿ∑ŸÑÿ®. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ ŸÑÿßÿ≠ŸÇŸãÿß.",
        "api_request_failed": "‚ùå ÿπÿ∞ÿ±ÿßŸãÿå ŸÑŸÖ ÿ£ÿ™ŸÖŸÉŸÜ ŸÖŸÜ ÿ¨ŸÑÿ® ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ∑ŸÇÿ≥ ÿßŸÑÿ¢ŸÜ. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ ŸÑÿßÿ≠ŸÇŸãÿß.",
        "unexpected_error": "‚ùå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ∫Ÿäÿ± ŸÖÿ™ŸàŸÇÿπ. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.",
        "city_not_found_weather": "üö´ ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ŸÖÿØŸäŸÜÿ© '{city}'. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ•ŸÖŸÑÿßÿ° ŸàÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.",
        "error_fetching_forecast": "‚ùå ÿ™ÿπÿ∞ÿ± ÿ¨ŸÑÿ® ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ™ŸàŸÇÿπÿßÿ™. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ ŸÑÿßÿ≠ŸÇŸãÿß.",
        "units_celsius": "ŸÖÿ¶ŸàŸäÿ© (¬∞ŸÖ)",
        "units_fahrenheit": "ŸÅŸáÿ±ŸÜŸáÿßŸäÿ™ (¬∞ŸÅ)",
        "default_city_not_set": "ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿ™ÿπŸäŸäŸÜ",
        "set_default_city_instructions": "üè† ŸÑÿ™ÿπŸäŸäŸÜ ŸÖÿØŸäŸÜÿ© ÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ©ÿå ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑÿ£ŸÖÿ±:\n<code>/addfav [ŸÖÿØŸäŸÜÿ©]</code> ÿ´ŸÖ ÿßÿ±ÿ¨ÿπ ÿ•ŸÑŸâ ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™.\n\nÿ£Ÿà ŸÅŸÇÿ∑ ÿßŸÉÿ™ÿ® ÿßÿ≥ŸÖ ŸÖÿØŸäŸÜÿ© Ÿàÿ≥ÿ£ÿ™ÿ∞ŸÉÿ±Ÿáÿß!",
        "manage_favorites_menu": "‚≠ê <b>ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿØŸÜ ÿßŸÑŸÖŸÅÿ∂ŸÑÿ©</b>\n\nÿßŸÜŸÇÿ± ŸÑÿ•ÿ≤ÿßŸÑÿ© ŸÖÿØŸäŸÜÿ©:",
        "reset_settings_confirm": "‚úÖ ÿ™ŸÖ ÿ•ÿπÿßÿØÿ© ÿ™ÿπŸäŸäŸÜ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™ ÿ•ŸÑŸâ ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿä!",
        "manage_favorites_back": "‚¨ÖÔ∏è ÿßŸÑÿπŸàÿØÿ© ÿ•ŸÑŸâ ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™",
        "add_to_favorites_button": "‚≠ê ÿ•ÿ∂ÿßŸÅÿ© ÿ•ŸÑŸâ ÿßŸÑŸÖŸÅÿ∂ŸÑÿ©",
        "manage_favorites_button": "‚öôÔ∏è ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖŸÅÿ∂ŸÑÿ©",
        "openweather_map_button": "üó∫Ô∏è ÿÆÿ±Ÿäÿ∑ÿ© OpenWeather",
        "Maps_button": "üìç ÿÆÿ±ÿßÿ¶ÿ∑ ÿ¨Ÿàÿ¨ŸÑ",
        "temperature_comparison": "üå°Ô∏è <b>ÿØÿ±ÿ¨ÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±ÿ© ({unit_symbol})</b>\n",
        "humidity_comparison": "üíß <b>ÿßŸÑÿ±ÿ∑Ÿàÿ®ÿ© (%)</b>\n",
        "current_conditions_comparison": "‚òÅÔ∏è <b>ÿßŸÑÿ∏ÿ±ŸàŸÅ ÿßŸÑÿ≠ÿßŸÑŸäÿ©</b>\n",
        "highlights_comparison": "\nüèÖ <b>ÿßŸÑŸÜŸÇÿßÿ∑ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©</b>\n",
        "hottest": "üî• ÿßŸÑÿ£ŸÉÿ´ÿ± ÿ≠ÿ±ÿßÿ±ÿ©: {city} ({temp:.1f}{unit_symbol})",
        "coldest": "üßä ÿßŸÑÿ£ÿ®ÿ±ÿØ: {city} ({temp:.1f}{unit_symbol})",
        "most_humid": "üíß ÿßŸÑÿ£ŸÉÿ´ÿ± ÿ±ÿ∑Ÿàÿ®ÿ©: {city} ({humidity}%)",
        "weather_comparison_title": "üèÜ <b>ŸÖŸÇÿßÿ±ŸÜÿ© ÿßŸÑÿ∑ŸÇÿ≥</b>\n\n",
        "units_toggle_button": "üå°Ô∏è ÿßŸÑŸàÿ≠ÿØÿßÿ™: {unit_name}",
        "language_toggle_button": "üåê ÿßŸÑŸÑÿ∫ÿ©: {language_name}",
        "default_city_button": "üè† ÿßŸÑŸÖÿØŸäŸÜÿ© ÿßŸÑÿßŸÅÿ™ÿ±ÿßÿ∂Ÿäÿ©: {city_name}",
        "reset_settings_button": "üóëÔ∏è ÿ•ÿπÿßÿØÿ© ÿ™ÿπŸäŸäŸÜ ÿ¨ŸÖŸäÿπ ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™",
        "choose_language": "üåê <b>ÿßÿÆÿ™ÿ± ŸÑÿ∫ÿ™ŸÉ:</b>",
        "language_set": "üåê ÿ™ŸÖ ÿ™ÿπŸäŸäŸÜ ÿßŸÑŸÑÿ∫ÿ© ÿ•ŸÑŸâ {language_name}!",
        "english": "ÿßŸÑÿ•ŸÜÿ¨ŸÑŸäÿ≤Ÿäÿ©",
        "arabic": "ÿßŸÑÿπÿ±ÿ®Ÿäÿ©",
        "current_weather_button": "üå§Ô∏è ÿßŸÑÿ∑ŸÇÿ≥ ÿßŸÑÿ≠ÿßŸÑŸä",
        "five_day_forecast_button": "üìä ÿ™ŸàŸÇÿπÿßÿ™ 5 ÿ£ŸäÿßŸÖ",
        "search_cities_button": "üîç ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ŸÖÿØŸÜ",
        "favorites_button": "‚≠ê ÿßŸÑŸÖŸÅÿ∂ŸÑÿ©",
        "settings_button": "‚öôÔ∏è ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™",
        "weather_in_city": "ÿßŸÑÿ∑ŸÇÿ≥ ÿßŸÑÿ≠ÿßŸÑŸä ŸÅŸä {city}, {country}",
        "temperature": "ÿØÿ±ÿ¨ÿ© ÿßŸÑÿ≠ÿ±ÿßÿ±ÿ©",
        "feels_like": "ÿßŸÑÿ¥ÿπŸàÿ± ŸÉÿ£ŸÜ",
        "humidity": "ÿßŸÑÿ±ÿ∑Ÿàÿ®ÿ©",
        "pressure": "ÿßŸÑÿ∂ÿ∫ÿ∑",
        "wind": "ÿßŸÑÿ±Ÿäÿßÿ≠",
        "cloudiness": "ÿßŸÑÿ∫ŸäŸàŸÖ",
        "visibility": "ÿßŸÑÿ±ÿ§Ÿäÿ©",
        "conditions": "ÿßŸÑÿ∏ÿ±ŸàŸÅ",
        "sunrise": "ÿ¥ÿ±ŸàŸÇ ÿßŸÑÿ¥ŸÖÿ≥",
        "sunset": "ÿ∫ÿ±Ÿàÿ® ÿßŸÑÿ¥ŸÖÿ≥",
        "meters_per_second": "ŸÖ/ÿ´",
        "miles_per_hour": "ŸÖŸäŸÑ/ÿ≥ÿßÿπÿ©",
        "forecast_for_city": "ÿ™ŸàŸÇÿπÿßÿ™ 5 ÿ£ŸäÿßŸÖ ŸÑŸÄ {city}, {country}",
        "extreme_heat_warning": "ÿ™ÿ≠ÿ∞Ÿäÿ± ŸÖŸÜ ÿ≠ÿ±ÿßÿ±ÿ© ÿ¥ÿØŸäÿØÿ©!",
        "extreme_cold_warning": "ÿ™ÿ≠ÿ∞Ÿäÿ± ŸÖŸÜ ÿ®ÿ±ÿØ ÿ¥ÿØŸäÿØ!",
        "high_wind_alert": "ÿ™ÿ≠ÿ∞Ÿäÿ± ŸÖŸÜ ÿ±Ÿäÿßÿ≠ ŸÇŸàŸäÿ©!",
        "high_humidity_alert": "ÿ™ÿ≠ÿ∞Ÿäÿ± ŸÖŸÜ ÿ±ÿ∑Ÿàÿ®ÿ© ÿπÿßŸÑŸäÿ©!",
        "thunderstorm_alert": "ÿ™ÿ≠ÿ∞Ÿäÿ± ŸÖŸÜ ÿπÿßÿµŸÅÿ© ÿ±ÿπÿØŸäÿ©!",
        "heavy_rain_alert": "ÿ™ÿ≠ÿ∞Ÿäÿ± ŸÖŸÜ ÿ£ŸÖÿ∑ÿßÿ± ÿ∫ÿ≤Ÿäÿ±ÿ©!",
        "snow_alert": "ÿ™ÿ≠ÿ∞Ÿäÿ± ŸÖŸÜ ÿ™ÿ≥ÿßŸÇÿ∑ ÿ´ŸÑŸàÿ¨!",
        "error_fetching_data_any_cities": "‚ùå ÿ™ÿπÿ∞ÿ± ÿ¨ŸÑÿ® ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ∑ŸÇÿ≥ ŸÑÿ®ÿπÿ∂ ÿßŸÑŸÖÿØŸÜ. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ ŸÑÿßÿ≠ŸÇŸãÿß."
    }
}

def get_localized_message(user_language: str, key: str, **kwargs) -> str:
    """Get a localized message based on user's language."""
    return MESSAGES.get(user_language, MESSAGES["en"]).get(key, MESSAGES["en"][key]).format(**kwargs)
</file>

<file path="main.py">
import logging
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# Import modules from your new structure
from config import TELEGRAM_BOT_TOKEN, WEATHER_API_KEY
from data_store import UserDataStore
from weather_api import WeatherAPI
from handlers import command_handlers, callback_handlers # Import the handler modules

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def main():
    """Starts the bot."""
    if not TELEGRAM_BOT_TOKEN or not WEATHER_API_KEY:
        logger.error("Bot cannot start: Missing required environment variables. Please check config.py or your .env file.")
        return

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # Initialize shared resources and store them in bot_data
    user_data_store = UserDataStore()
    weather_api_client = WeatherAPI(WEATHER_API_KEY)
    
    application.bot_data['user_data_store'] = user_data_store
    application.bot_data['weather_api_client'] = weather_api_client

    # Command handlers
    application.add_handler(CommandHandler("start", command_handlers.start_command))
    application.add_handler(CommandHandler("help", command_handlers.help_command))
    application.add_handler(CommandHandler("weather", command_handlers.weather_command))
    application.add_handler(CommandHandler("forecast", command_handlers.forecast_command))
    application.add_handler(CommandHandler("search", command_handlers.search_cities))
    application.add_handler(CommandHandler("favorites", command_handlers.favorites_command))
    application.add_handler(CommandHandler("addfav", command_handlers.add_favorite))
    application.add_handler(CommandHandler("removefav", command_handlers.remove_favorite))
    application.add_handler(CommandHandler("settings", command_handlers.settings_command))
    application.add_handler(CommandHandler("alerts", command_handlers.weather_alerts))
    application.add_handler(CommandHandler("compare", command_handlers.compare_cities))
    application.add_handler(CommandHandler("map", command_handlers.weather_map))
    
    # Callback query handler for inline keyboards
    application.add_handler(CallbackQueryHandler(callback_handlers.handle_callback))
    
    # Message handler for city names
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        command_handlers.handle_city_message
    ))

    # Error handler
    application.add_error_handler(error_handler)

    print("üöÄ Starting Enhanced Weather Bot...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle errors."""
    logger.error(f"Exception while handling an update: {context.error}")
    if update and update.effective_message:
        user_id = update.effective_user.id
        user_data_store = context.bot_data.get('user_data_store')
        prefs = user_data_store.get_user_prefs(user_id)
        await update.effective_message.reply_text(get_localized_message(prefs.language, "unexpected_error"))


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë Bot stopped by user")
    except Exception as e:
        logger.critical(f"Failed to start bot: {e}")
        print(f"‚ùå Critical Error: {e}")
</file>

<file path="utils.py">
from datetime import datetime
from localization import get_localized_message
from typing import Dict, Any

def get_weather_emoji(weather_id: int) -> str:
    """Get appropriate emoji for weather condition based on OpenWeatherMap weather ID."""
    if weather_id < 300:
        return "‚õàÔ∏è"  # Thunderstorm
    elif weather_id < 400:
        return "üå¶Ô∏è"  # Drizzle
    elif weather_id < 600:
        return "üåßÔ∏è"  # Rain
    elif weather_id < 700:
        return "‚ùÑÔ∏è"  # Snow
    elif weather_id < 800:
        return "üå´Ô∏è"  # Atmosphere (fog, mist, etc.)
    elif weather_id == 800:
        return "‚òÄÔ∏è"  # Clear sky
    else:
        return "‚òÅÔ∏è"  # Clouds

def format_weather_message(data: Dict[str, Any], prefs_lang: str, unit: str) -> str:
    """Format current weather data into a readable message."""
    city = data['name']
    country = data['sys']['country']
    temp = data['main']['temp']
    feels_like = data['main']['feels_like']
    humidity = data['main']['humidity']
    pressure = data['main']['pressure']
    description = data['weather'][0]['description'].title()
    
    wind_speed = data.get('wind', {}).get('speed', 0)
    wind_deg = data.get('wind', {}).get('deg', 0)
    visibility = data.get('visibility', 0) / 1000 if data.get('visibility') else None
    clouds = data.get('clouds', {}).get('all', 0)
    
    sunrise = datetime.fromtimestamp(data['sys']['sunrise']).strftime('%H:%M')
    sunset = datetime.fromtimestamp(data['sys']['sunset']).strftime('%H:%M')
    
    weather_id = data['weather'][0]['id']
    emoji = get_weather_emoji(weather_id)
    
    if unit == 'metric':
        temp_unit = "¬∞C"
        speed_unit = get_localized_message(prefs_lang, "meters_per_second")
    else:
        temp_unit = "¬∞F"
        speed_unit = get_localized_message(prefs_lang, "miles_per_hour")
    
    temp = round(temp)
    feels_like = round(feels_like)

    # Simplified wind direction logic
    wind_directions = ["N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE",
                      "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW"]
    wind_dir = wind_directions[round(wind_deg / 22.5) % 16] if wind_deg is not None else "N/A"
    
    message = (
        f"{emoji} <b>{get_localized_message(prefs_lang, 'weather_in_city', city=city, country=country)}</b>\n\n"
        f"üå°Ô∏è {get_localized_message(prefs_lang, 'temperature')}: {temp}{temp_unit}\n"
        f"ü§î {get_localized_message(prefs_lang, 'feels_like')}: {feels_like}{temp_unit}\n"
        f"üíß {get_localized_message(prefs_lang, 'humidity')}: {humidity}%\n"
        f"üìä {get_localized_message(prefs_lang, 'pressure')}: {pressure} hPa\n"
        f"üí® {get_localized_message(prefs_lang, 'wind')}: {wind_speed:.1f} {speed_unit} {wind_dir}\n"
        f"‚òÅÔ∏è {get_localized_message(prefs_lang, 'cloudiness')}: {clouds}%\n"
    )
    
    if visibility is not None:
        message += f"üëÅÔ∏è {get_localized_message(prefs_lang, 'visibility')}: {visibility:.1f} km\n"
    
    message += (
        f"üìù {get_localized_message(prefs_lang, 'conditions')}: {description}\n\n"
        f"üåÖ {get_localized_message(prefs_lang, 'sunrise')}: {sunrise}\n"
        f"üåá {get_localized_message(prefs_lang, 'sunset')}: {sunset}"
    )
    
    return message

def format_forecast_message(data: Dict[str, Any], prefs_lang: str, unit: str) -> str:
    """Format 5-day forecast data into a readable message."""
    city = data['city']['name']
    country = data['city']['country']
    
    unit_symbol = "¬∞C" if unit == "metric" else "¬∞F"
    
    message = get_localized_message(prefs_lang, "forecast_for_city", city=city, country=country) + "\n\n"
    
    daily_forecasts = {}
    for item in data['list']:
        date = datetime.fromtimestamp(item['dt']).date()
        if date not in daily_forecasts:
            daily_forecasts[date] = []
        daily_forecasts[date].append(item)
    
    for i, (date, forecasts) in enumerate(list(daily_forecasts.items())[:5]):
        day_name = date.strftime('%A')
        date_str = date.strftime('%m/%d')
        
        temps = [f['main']['temp'] for f in forecasts]
        min_temp = min(temps)
        max_temp = max(temps)
        
        conditions = [f['weather'][0] for f in forecasts]
        main_condition_group = max(set(c['main'] for c in conditions), 
                                   key=[c['main'] for c in conditions].count)
        
        # Get a representative description, prefer one matching the main condition group
        representative_description = next((c['description'].title() for c in conditions if c['main'] == main_condition_group), conditions[0]['description'].title())
        
        weather_ids = [c['id'] for c in conditions if c['main'] == main_condition_group]
        representative_id = weather_ids[0] if weather_ids else conditions[0]['id']
        
        emoji = get_weather_emoji(representative_id)
        
        pop = max([f.get('pop', 0) for f in forecasts]) * 100
        
        message += f"{emoji} <b>{day_name} ({date_str})</b>\n"
        message += f"   üå°Ô∏è {min_temp:.0f}{unit_symbol} - {max_temp:.0f}{unit_symbol}"
        
        if pop > 20:
            message += f" | üåßÔ∏è {pop:.0f}%"
        
        message += f"\n   üìù {representative_description}\n\n"
        
    return message
</file>

<file path="weather_api.py">
import requests
import logging
from typing import Dict, Any, Optional
from config import WEATHER_API_KEY, WEATHER_API_URL, FORECAST_API_URL, GEOCODING_API_URL, REQUEST_TIMEOUT

logger = logging.getLogger(__name__)

class WeatherAPI:
    def __init__(self, api_key: str):
        self.api_key = api_key

    async def get_current_weather(self, city: str, unit: str, lang: str) -> Optional[Dict[str, Any]]:
        """Fetches current weather data for a given city."""
        params = {
            'q': city,
            'appid': self.api_key,
            'units': unit,
            'lang': lang
        }
        try:
            response = requests.get(WEATHER_API_URL, params=params, timeout=REQUEST_TIMEOUT)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.Timeout:
            logger.error(f"Weather API request timed out for {city}")
            return None
        except requests.exceptions.RequestException as e:
            logger.error(f"Error fetching current weather for {city}: {e}")
            if response.status_code == 404:
                return {"error": "city_not_found"}
            return None

    async def get_five_day_forecast(self, city: str, unit: str, lang: str) -> Optional[Dict[str, Any]]:
        """Fetches 5-day weather forecast data for a given city."""
        params = {
            'q': city,
            'appid': self.api_key,
            'units': unit,
            'lang': lang
        }
        try:
            response = requests.get(FORECAST_API_URL, params=params, timeout=REQUEST_TIMEOUT)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.Timeout:
            logger.error(f"Forecast API request timed out for {city}")
            return None
        except requests.exceptions.RequestException as e:
            logger.error(f"Error fetching forecast for {city}: {e}")
            if response.status_code == 404:
                return {"error": "city_not_found"}
            return None

    async def get_city_coordinates(self, query: str) -> Optional[list]:
        """Fetches geographical coordinates for a city query."""
        params = {
            'q': query,
            'appid': self.api_key,
            'limit': 10
        }
        try:
            response = requests.get(GEOCODING_API_URL, params=params, timeout=REQUEST_TIMEOUT)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.Timeout:
            logger.error(f"Geocoding API request timed out for {query}")
            return None
        except requests.exceptions.RequestException as e:
            logger.error(f"Error fetching coordinates for {query}: {e}")
            return None

    async def verify_city_exists(self, city: str, lang: str) -> bool:
        """Verifies if a city exists by trying to fetch its current weather."""
        params = {
            'q': city,
            'appid': self.api_key,
            'units': 'metric', # Unit doesn't matter for existence check
            'lang': lang
        }
        try:
            response = requests.get(WEATHER_API_URL, params=params, timeout=5)
            return response.status_code == 200
        except requests.exceptions.RequestException as e:
            logger.error(f"Error verifying city {city}: {e}")
            return False
</file>

<file path="docker-compose.yml">
version: '3.8'

services:
  weather-bot:
    build: .
    container_name: telegram-weather-bot
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      # Optional: Mount logs directory
      - ./logs:/app/logs
    networks:
      - bot-network

    # Optional: Resource limits
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

networks:
  bot-network:
    driver: bridge
</file>

<file path="Dockerfile">
# Dockerfile
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Copy requirements first (for better caching)
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create non-root user for security
RUN useradd -m -u 1001 botuser && chown -R botuser:botuser /app
USER botuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD python -c "import requests; requests.get('https://api.telegram.org', timeout=5)" || exit 1

# Run the bot
CMD ["python", "weather_bot.py"]
</file>

<file path="requirements.txt">
python-telegram-bot==20.7
requests==2.31.0
python-dotenv==1.0.0
</file>

<file path="weather_bot.py">
from dotenv import load_dotenv
load_dotenv()
import os
import requests
import logging
import json
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from dataclasses import dataclass

# Load environment variables
load_dotenv()

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot configuration
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

# Validate environment variables
if not TELEGRAM_BOT_TOKEN or not WEATHER_API_KEY:
    logger.error("Missing required environment variables!")
    logger.error("Please set TELEGRAM_BOT_TOKEN and WEATHER_API_KEY")
    exit(1)

# API URLs
WEATHER_API_URL = "https://api.openweathermap.org/data/2.5/weather"
FORECAST_API_URL = "https://api.openweathermap.org/data/2.5/forecast"
GEOCODING_API_URL = "https://api.openweathermap.org/geo/1.0/direct"

@dataclass
class UserPreferences:
    """User preferences data class"""
    unit: str = "metric"  # metric, imperial
    language: str = "en"
    favorites: List[str] = None
    default_city: str = None
    
    def __post_init__(self):
        if self.favorites is None:
            self.favorites = []

class WeatherBot:
    def __init__(self):
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.user_preferences: Dict[int, UserPreferences] = {}
        self.setup_handlers()
        self.load_user_data()
    
    def setup_handlers(self):
        """Set up command and message handlers"""
        # Command handlers
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("weather", self.weather_command))
        self.application.add_handler(CommandHandler("forecast", self.forecast_command))
        self.application.add_handler(CommandHandler("search", self.search_cities))
        self.application.add_handler(CommandHandler("favorites", self.favorites_command))
        self.application.add_handler(CommandHandler("addfav", self.add_favorite))
        self.application.add_handler(CommandHandler("removefav", self.remove_favorite))
        self.application.add_handler(CommandHandler("settings", self.settings_command))
        self.application.add_handler(CommandHandler("alerts", self.weather_alerts))
        self.application.add_handler(CommandHandler("compare", self.compare_cities))
        self.application.add_handler(CommandHandler("map", self.weather_map))
        
        # Callback query handler for inline keyboards
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # Message handler for city names
        self.application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            self.handle_city_message
        ))
    
    def load_user_data(self):
        """Load user preferences from file"""
        try:
            if os.path.exists('user_preferences.json'):
                with open('user_preferences.json', 'r') as f:
                    data = json.load(f)
                    for user_id, prefs in data.items():
                        self.user_preferences[int(user_id)] = UserPreferences(**prefs)
        except Exception as e:
            logger.error(f"Error loading user data: {e}")
    
    def save_user_data(self):
        """Save user preferences to file"""
        try:
            data = {}
            for user_id, prefs in self.user_preferences.items():
                data[str(user_id)] = {
                    'unit': prefs.unit,
                    'language': prefs.language,
                    'favorites': prefs.favorites,
                    'default_city': prefs.default_city
                }
            with open('user_preferences.json', 'w') as f:
                json.dump(data, f, indent=2)
        except Exception as e:
            logger.error(f"Error saving user data: {e}")
    
    def get_user_prefs(self, user_id: int) -> UserPreferences:
        """Get user preferences or create default"""
        if user_id not in self.user_preferences:
            self.user_preferences[user_id] = UserPreferences()
        return self.user_preferences[user_id]
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        keyboard = [
            [InlineKeyboardButton("üå§Ô∏è Current Weather", callback_data="help_weather")],
            [InlineKeyboardButton("üìä 5-Day Forecast", callback_data="help_forecast")],
            [InlineKeyboardButton("üîç Search Cities", callback_data="help_search")],
            [InlineKeyboardButton("‚≠ê Favorites", callback_data="help_favorites")],
            [InlineKeyboardButton("‚öôÔ∏è Settings", callback_data="help_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_message = (
            "üå§Ô∏è <b>Welcome to Advanced Weather Bot!</b> üå§Ô∏è\n\n"
            "I'm your comprehensive weather assistant with many features:\n\n"
            "üîπ Current weather for any city\n"
            "üîπ 5-day detailed forecasts\n"
            "üîπ City search and suggestions\n"
            "üîπ Favorite locations\n"
            "üîπ Weather alerts\n"
            "üîπ City comparisons\n"
            "üîπ Customizable units & settings\n\n"
            "Choose a category below or type a city name to get started!"
        )
        await update.message.reply_text(welcome_message, parse_mode='HTML', reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_message = (
            "üÜò <b>Weather Bot Commands</b>\n\n"
            "üìç <b>Weather Commands:</b>\n"
            "‚Ä¢ <code>/weather [city]</code> - Current weather\n"
            "‚Ä¢ <code>/forecast [city]</code> - 5-day forecast\n"
            "‚Ä¢ <code>/alerts [city]</code> - Weather alerts\n\n"
            "üîç <b>Search & Discovery:</b>\n"
            "‚Ä¢ <code>/search [query]</code> - Find cities\n"
            "‚Ä¢ <code>/map [city]</code> - Weather map link\n"
            "‚Ä¢ <code>/compare city1,city2</code> - Compare cities\n\n"
            "‚≠ê <b>Favorites:</b>\n"
            "‚Ä¢ <code>/favorites</code> - Show favorite cities\n"
            "‚Ä¢ <code>/addfav [city]</code> - Add to favorites\n"
            "‚Ä¢ <code>/removefav [city]</code> - Remove favorite\n\n"
            "‚öôÔ∏è <b>Settings:</b>\n"
            "‚Ä¢ <code>/settings</code> - Change preferences\n\n"
            "üí° <b>Tips:</b>\n"
            "‚Ä¢ Just type a city name for quick weather\n"
            "‚Ä¢ Use quotes for cities with spaces: 'New York'\n"
            "‚Ä¢ Set a default city in settings"
        )
        await update.message.reply_text(help_message, parse_mode='HTML')
    
    async def weather_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /weather command"""
        user_id = update.effective_user.id
        prefs = self.get_user_prefs(user_id)
        
        if not context.args:
            if prefs.default_city:
                city = prefs.default_city
            else:
                await update.message.reply_text(
                    "Please specify a city! Usage: <code>/weather [city]</code>\n"
                    "Example: <code>/weather London</code>\n"
                    "Or set a default city in /settings", parse_mode='HTML'
                )
                return
        else:
            city = " ".join(context.args)
        
        await self.get_and_send_weather(update, city, prefs)
    
    async def forecast_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /forecast command"""
        user_id = update.effective_user.id
        prefs = self.get_user_prefs(user_id)
        
        if not context.args:
            if prefs.default_city:
                city = prefs.default_city
            else:
                await update.message.reply_text(
                    "Please specify a city! Usage: <code>/forecast [city]</code>\n"
                    "Example: <code>/forecast Tokyo</code>", parse_mode='HTML'
                )
                return
        else:
            city = " ".join(context.args)
        
        await self.get_and_send_forecast(update, city, prefs)
    
    async def search_cities(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Search for cities"""
        if not context.args:
            await update.message.reply_text(
                "Please provide a search query! Usage: <code>/search [query]</code>\n"
                "Example: <code>/search paris</code>", parse_mode='HTML'
            )
            return
        
        query = " ".join(context.args)
        await self.search_and_show_cities(update, query)
    
    async def favorites_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show favorite cities"""
        user_id = update.effective_user.id
        prefs = self.get_user_prefs(user_id)
        
        if not prefs.favorites:
            await update.message.reply_text(
                "You don't have any favorite cities yet!\n"
                "Add some using <code>/addfav [city]</code>", parse_mode='HTML'
            )
            return
        
        keyboard = []
        for city in prefs.favorites[:10]:  # Limit to 10 favorites
            keyboard.append([InlineKeyboardButton(f"üå§Ô∏è {city}", callback_data=f"weather_{city}")])
        
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è Manage Favorites", callback_data="manage_favorites")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = f"‚≠ê <b>Your Favorite Cities ({len(prefs.favorites)})</b>\n\nClick on any city to get current weather:"
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
    
    async def add_favorite(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Add city to favorites"""
        if not context.args:
            await update.message.reply_text(
                "Please specify a city! Usage: <code>/addfav [city]</code>", parse_mode='HTML'
            )
            return
        
        city = " ".join(context.args)
        user_id = update.effective_user.id
        prefs = self.get_user_prefs(user_id)
        
        # Verify city exists
        if not await self.verify_city_exists(city):
            await update.message.reply_text(f"üö´ City '{city}' not found. Please check the spelling.")
            return
        
        if city.lower() not in [fav.lower() for fav in prefs.favorites]:
            prefs.favorites.append(city)
            self.save_user_data()
            await update.message.reply_text(f"‚≠ê Added '{city}' to your favorites!")
        else:
            await update.message.reply_text(f"'{city}' is already in your favorites!")
    
    async def remove_favorite(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Remove city from favorites"""
        if not context.args:
            await update.message.reply_text(
                "Please specify a city! Usage: <code>/removefav [city]</code>", parse_mode='HTML'
            )
            return
        
        city = " ".join(context.args)
        user_id = update.effective_user.id
        prefs = self.get_user_prefs(user_id)
        
        # Find and remove city (case insensitive)
        for fav in prefs.favorites[:]:
            if fav.lower() == city.lower():
                prefs.favorites.remove(fav)
                self.save_user_data()
                await update.message.reply_text(f"üóëÔ∏è Removed '{fav}' from favorites!")
                return
        
        await update.message.reply_text(f"'{city}' is not in your favorites!")
    
    async def settings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show settings menu"""
        user_id = update.effective_user.id
        prefs = self.get_user_prefs(user_id)
        
        keyboard = [
            [InlineKeyboardButton(f"üå°Ô∏è Units: {'Celsius' if prefs.unit == 'metric' else 'Fahrenheit'}", callback_data="toggle_units")],
            [InlineKeyboardButton(f"üè† Default City: {prefs.default_city or 'None'}", callback_data="set_default_city")],
            [InlineKeyboardButton("‚≠ê Manage Favorites", callback_data="manage_favorites")],
            [InlineKeyboardButton("üóëÔ∏è Reset All Settings", callback_data="reset_settings")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = (
            "‚öôÔ∏è <b>Settings</b>\n\n"
            f"üå°Ô∏è Temperature Unit: {'Celsius (¬∞C)' if prefs.unit == 'metric' else 'Fahrenheit (¬∞F)'}\n"
            f"üè† Default City: {prefs.default_city or 'Not set'}\n"
            f"‚≠ê Favorite Cities: {len(prefs.favorites)}\n\n"
            "Click the buttons below to change settings:"
        )
        await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
    
    async def weather_alerts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show weather alerts for a city"""
        user_id = update.effective_user.id
        prefs = self.get_user_prefs(user_id)
        
        if not context.args:
            if prefs.default_city:
                city = prefs.default_city
            else:
                await update.message.reply_text(
                    "Please specify a city! Usage: <code>/alerts [city]</code>", parse_mode='HTML'
                )
                return
        else:
            city = " ".join(context.args)
        
        try:
            # Get weather data to check for alerts
            params = {
                'q': city,
                'appid': WEATHER_API_KEY,
                'units': prefs.unit
            }
            
            response = requests.get(WEATHER_API_URL, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()
            
            alerts = []
            
            # Check for extreme conditions
            temp = data['main']['temp']
            humidity = data['main']['humidity']
            wind_speed = data.get('wind', {}).get('speed', 0)
            weather_id = data['weather'][0]['id']
            
            if prefs.unit == 'metric':
                if temp > 35:
                    alerts.append("üî• Extreme Heat Warning")
                elif temp < -10:
                    alerts.append("üßä Extreme Cold Warning")
                if wind_speed > 10:
                    alerts.append("üí® High Wind Alert")
            else:
                if temp > 95:
                    alerts.append("üî• Extreme Heat Warning")
                elif temp < 14:
                    alerts.append("üßä Extreme Cold Warning")
                if wind_speed > 22:
                    alerts.append("üí® High Wind Alert")
            
            if humidity > 85:
                alerts.append("üíß High Humidity Alert")
            
            if weather_id < 300:
                alerts.append("‚õàÔ∏è Thunderstorm Alert")
            elif weather_id < 600 and weather_id >= 500:
                alerts.append("üåßÔ∏è Heavy Rain Alert")
            elif weather_id < 700 and weather_id >= 600:
                alerts.append("‚ùÑÔ∏è Snow Alert")
            
            city_name = f"{data['name']}, {data['sys']['country']}"
            
            if alerts:
                message = f"‚ö†Ô∏è <b>Weather Alerts for {city_name}</b>\n\n"
                message += "\n".join(f"‚Ä¢ {alert}" for alert in alerts)
                message += f"\n\nüå°Ô∏è Current temp: {temp}¬∞{'C' if prefs.unit == 'metric' else 'F'}"
            else:
                message = f"‚úÖ <b>No Weather Alerts for {city_name}</b>\n\nCurrent conditions are normal."
            
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"Error getting alerts: {e}")
            await update.message.reply_text("‚ùå Could not fetch weather alerts. Please try again later.")
    
    async def compare_cities(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Compare weather between cities"""
        if not context.args:
            await update.message.reply_text(
                "Please specify cities to compare!\n"
                "Usage: <code>/compare city1,city2</code>\n"
                "Example: <code>/compare London,Paris</code>", parse_mode='HTML'
            )
            return
        
        cities_input = " ".join(context.args)
        cities = [city.strip() for city in cities_input.split(',')]
        
        if len(cities) < 2:
            await update.message.reply_text(
                "Please specify at least 2 cities separated by commas!\n"
                "Example: <code>/compare London,Paris</code>", parse_mode='HTML'
            )
            return
        
        if len(cities) > 4:
            await update.message.reply_text("You can compare up to 4 cities at once!")
            cities = cities[:4]
        
        user_id = update.effective_user.id
        prefs = self.get_user_prefs(user_id)
        
        await self.compare_weather(update, cities, prefs)
    
    async def weather_map(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Provide weather map link"""
        if not context.args:
            await update.message.reply_text(
                "Please specify a city! Usage: <code>/map [city]</code>", parse_mode='HTML'
            )
            return
        
        city = " ".join(context.args)
        
        # Get city coordinates
        try:
            params = {
                'q': city,
                'appid': WEATHER_API_KEY,
                'limit': 1
            }
            
            response = requests.get(GEOCODING_API_URL, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()
            
            if not data:
                await update.message.reply_text(f"üö´ City '{city}' not found.")
                return
            
            lat = data[0]['lat']
            lon = data[0]['lon']
            name = data[0]['name']
            country = data[0].get('country', '')
            
            # Create map links
            openweather_map = f"https://openweathermap.org/weathermap?basemap=map&cities=true&layer=temperature&lat={lat}&lon={lon}&zoom=10"
            google_maps = f"https://www.google.com/maps/@{lat},{lon},10z"
            
            keyboard = [
                [InlineKeyboardButton("üó∫Ô∏è OpenWeather Map", url=openweather_map)],
                [InlineKeyboardButton("üìç Google Maps", url=google_maps)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            message = f"üó∫Ô∏è <b>Weather Maps for {name}, {country}</b>\n\nClick the links below to view interactive weather maps:"
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"Error getting map: {e}")
            await update.message.reply_text("‚ùå Could not generate map links. Please try again later.")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle inline keyboard callbacks"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = update.effective_user.id
        prefs = self.get_user_prefs(user_id)
        
        if data.startswith("weather_"):
            city = data.replace("weather_", "")
            await self.get_and_send_weather(update, city, prefs, edit_message=True)
        
        elif data == "toggle_units":
            prefs.unit = "imperial" if prefs.unit == "metric" else "metric"
            self.save_user_data()
            await self.settings_command(update, context)
        
        elif data == "set_default_city":
            await query.edit_message_text(
                "üè† To set a default city, use the command:\n"
                "<code>/addfav [city]</code> then come back to settings.\n\n"
                "Or just type a city name and I'll remember it!",
                parse_mode='HTML'
            )
        
        elif data == "manage_favorites":
            if not prefs.favorites:
                await query.edit_message_text(
                    "You don't have any favorite cities yet!\n"
                    "Add some using <code>/addfav [city]</code>",
                    parse_mode='HTML'
                )
                return
            
            keyboard = []
            for city in prefs.favorites:
                keyboard.append([InlineKeyboardButton(f"üóëÔ∏è Remove {city}", callback_data=f"removefav_{city}")])
            
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è Back to Settings", callback_data="back_to_settings")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "‚≠ê <b>Manage Favorite Cities</b>\n\nClick to remove a city:",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
        
        elif data.startswith("removefav_"):
            city = data.replace("removefav_", "")
            if city in prefs.favorites:
                prefs.favorites.remove(city)
                self.save_user_data()
            await self.handle_callback(update, context)  # Refresh the list
        
        elif data == "back_to_settings":
            await self.settings_command(update, context)
        
        elif data == "reset_settings":
            self.user_preferences[user_id] = UserPreferences()
            self.save_user_data()
            await query.edit_message_text("‚úÖ All settings have been reset to default!")
    
    async def handle_city_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle direct city name messages"""
        city = update.message.text.strip().strip('"\'')
        user_id = update.effective_user.id
        prefs = self.get_user_prefs(user_id)
        
        # Auto-add frequently searched cities to favorites
        if city.lower() not in [fav.lower() for fav in prefs.favorites] and len(prefs.favorites) < 5:
            if await self.verify_city_exists(city):
                keyboard = [[InlineKeyboardButton("‚≠ê Add to Favorites", callback_data=f"addfav_{city}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await self.get_and_send_weather(update, city, prefs, suggest_favorite=reply_markup)
            else:
                await self.get_and_send_weather(update, city, prefs)
        else:
            await self.get_and_send_weather(update, city, prefs)
    
    async def verify_city_exists(self, city: str) -> bool:
        """Verify if a city exists"""
        try:
            params = {
                'q': city,
                'appid': WEATHER_API_KEY,
                'units': 'metric'
            }
            response = requests.get(WEATHER_API_URL, params=params, timeout=5)
            return response.status_code == 200
        except:
            return False
    
    async def search_and_show_cities(self, update: Update, query: str):
        """Search for cities and show results"""
        try:
            await update.message.reply_chat_action(action="typing")
            
            params = {
                'q': query,
                'appid': WEATHER_API_KEY,
                'limit': 10
            }
            
            response = requests.get(GEOCODING_API_URL, params=params, timeout=10)
            response.raise_for_status()
            data = response.json()
            
            if not data:
                await update.message.reply_text(f"üö´ No cities found matching '{query}'")
                return
            
            keyboard = []
            message = f"üîç <b>Cities matching '{query}':</b>\n\n"
            
            for i, city in enumerate(data[:8], 1):
                name = city['name']
                country = city.get('country', '')
                state = city.get('state', '')
                
                full_name = f"{name}, {country}"
                if state and state != name:
                    full_name = f"{name}, {state}, {country}"
                
                message += f"{i}. {full_name}\n"
                keyboard.append([InlineKeyboardButton(f"üå§Ô∏è {full_name}", callback_data=f"weather_{name}")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(message, parse_mode='HTML', reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"Error searching cities: {e}")
            await update.message.reply_text("‚ùå Could not search for cities. Please try again later.")
    
    async def get_and_send_weather(self, update: Update, city: str, prefs: UserPreferences, edit_message: bool = False, suggest_favorite=None):
        """Fetch weather data and send response"""
        try:
            if not edit_message:
                await update.message.reply_chat_action(action="typing")
            
            # Make API request
            params = {
                'q': city,
                'appid': WEATHER_API_KEY,
                'units': prefs.unit
            }
            
            response = requests.get(WEATHER_API_URL, params=params, timeout=10)
            
            if response.status_code == 404:
                message = f"üö´ City '{city}' not found. Please check the spelling and try again."
                if edit_message:
                    await update.callback_query.edit_message_text(message)
                else:
                    await update.message.reply_text(message)
                return
            
            response.raise_for_status()
            data = response.json()
            
            # Format weather information
            weather_message = self.format_weather_message(data, prefs)
            
            if edit_message:
                await update.callback_query.edit_message_text(weather_message, parse_mode='HTML')
            else:
                await update.message.reply_text(weather_message, parse_mode='HTML', reply_markup=suggest_favorite)
            
        except requests.exceptions.Timeout:
            message = "‚è∞ Request timeout. Please try again later."
            if edit_message:
                await update.callback_query.edit_message_text(message)
            else:
                await update.message.reply_text(message)
        except requests.exceptions.RequestException as e:
            logger.error(f"API request failed: {e}")
            message = "‚ùå Sorry, I couldn't fetch weather data right now. Please try again later."
            if edit_message:
                await update.callback_query.edit_message_text(message)
            else:
                await update.message.reply_text(message)
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            message = "‚ùå An unexpected error occurred. Please try again."
            if edit_message:
                await update.callback_query.edit_message_text(message)
            else:
                await update.message.reply_text(message)
    
    async def get_and_send_forecast(self, update: Update, city: str, prefs: UserPreferences):
        """Fetch and send 5-day weather forecast"""
        try:
            await update.message.reply_chat_action(action="typing")
            
            params = {
                'q': city,
                'appid': WEATHER_API_KEY,
                'units': prefs.unit
            }
            
            response = requests.get(FORECAST_API_URL, params=params, timeout=10)
            
            if response.status_code == 404:
                await update.message.reply_text(f"üö´ City '{city}' not found.")
                return
            
            response.raise_for_status()
            data = response.json()
            
            forecast_message = self.format_forecast_message(data, prefs)
            await update.message.reply_text(forecast_message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"Error getting forecast: {e}")
            await update.message.reply_text("‚ùå Could not fetch forecast data. Please try again later.")
    
    async def compare_weather(self, update: Update, cities: List[str], prefs: UserPreferences):
        """Compare weather between multiple cities"""
        try:
            await update.message.reply_chat_action(action="typing")
            
            weather_data = []
            
            for city in cities:
                params = {
                    'q': city,
                    'appid': WEATHER_API_KEY,
                    'units': prefs.unit
                }
                
                response = requests.get(WEATHER_API_URL, params=params, timeout=10)
                if response.status_code == 200:
                    weather_data.append(response.json())
                else:
                    await update.message.reply_text(f"üö´ City '{city}' not found.")
                    return
            
            if not weather_data:
                await update.message.reply_text("‚ùå Could not fetch data for any cities.")
                return
            
            # Format comparison message
            unit_symbol = "¬∞C" if prefs.unit == "metric" else "¬∞F"
            speed_unit = "m/s" if prefs.unit == "metric" else "mph"
            
            message = "üèÜ <b>Weather Comparison</b>\n\n"
            
            # Temperature comparison
            temps = [(data['name'], data['main']['temp']) for data in weather_data]
            temps.sort(key=lambda x: x[1], reverse=True)
            
            message += f"üå°Ô∏è <b>Temperature ({unit_symbol})</b>\n"
            for i, (name, temp) in enumerate(temps, 1):
                emoji = "üî•" if i == 1 else "üßä" if i == len(temps) else "üå°Ô∏è"
                message += f"{i}. {emoji} {name}: {temp:.1f}{unit_symbol}\n"
            
            message += "\n"
            
            # Humidity comparison
            humidities = [(data['name'], data['main']['humidity']) for data in weather_data]
            humidities.sort(key=lambda x: x[1], reverse=True)
            
            message += "üíß <b>Humidity (%)</b>\n"
            for i, (name, humidity) in enumerate(humidities, 1):
                emoji = "üíß" if i == 1 else "üèúÔ∏è" if i == len(humidities) else "üí®"
                message += f"{i}. {emoji} {name}: {humidity}%\n"
            
            message += "\n"
            
            # Weather conditions
            message += "‚òÅÔ∏è <b>Current Conditions</b>\n"
            for data in weather_data:
                name = data['name']
                condition = data['weather'][0]['description'].title()
                emoji = self.get_weather_emoji(data['weather'][0]['id'])
                message += f"{emoji} {name}: {condition}\n"
            
            # Find extremes
            message += "\nüèÖ <b>Highlights</b>\n"
            hottest = max(weather_data, key=lambda x: x['main']['temp'])
            coldest = min(weather_data, key=lambda x: x['main']['temp'])
            most_humid = max(weather_data, key=lambda x: x['main']['humidity'])
            
            message += f"üî• Hottest: {hottest['name']} ({hottest['main']['temp']:.1f}{unit_symbol})\n"
            message += f"üßä Coldest: {coldest['name']} ({coldest['main']['temp']:.1f}{unit_symbol})\n"
            message += f"üíß Most Humid: {most_humid['name']} ({most_humid['main']['humidity']}%)"
            
            await update.message.reply_text(message, parse_mode='HTML')
            
        except Exception as e:
            logger.error(f"Error comparing weather: {e}")
            await update.message.reply_text("‚ùå Could not compare weather data. Please try again later.")
    
    def format_weather_message(self, data, prefs: UserPreferences):
        """Format weather data into a nice message"""
        city = data['name']
        country = data['sys']['country']
        temp = data['main']['temp']
        feels_like = data['main']['feels_like']
        humidity = data['main']['humidity']
        pressure = data['main']['pressure']
        description = data['weather'][0]['description'].title()
        
        # Get additional data
        wind_speed = data.get('wind', {}).get('speed', 0)
        wind_deg = data.get('wind', {}).get('deg', 0)
        visibility = data.get('visibility', 0) / 1000 if data.get('visibility') else None
        clouds = data.get('clouds', {}).get('all', 0)
        
        # Sunrise/sunset
        sunrise = datetime.fromtimestamp(data['sys']['sunrise']).strftime('%H:%M')
        sunset = datetime.fromtimestamp(data['sys']['sunset']).strftime('%H:%M')
        
        # Get weather emoji
        weather_id = data['weather'][0]['id']
        emoji = self.get_weather_emoji(weather_id)
        
        # Format units
        if prefs.unit == 'metric':
            temp_unit = "¬∞C"
            speed_unit = "m/s"
            temp = round(temp)
            feels_like = round(feels_like)
        else:
            temp_unit = "¬∞F"
            speed_unit = "mph"
            temp = round(temp)
            feels_like = round(feels_like)
        
        # Wind direction
        wind_directions = ["N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE",
                          "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW"]
        wind_dir = wind_directions[round(wind_deg / 22.5) % 16] if wind_deg else "N"
        
        message = (
            f"{emoji} <b>Weather in {city}, {country}</b>\n\n"
            f"üå°Ô∏è Temperature: {temp}{temp_unit}\n"
            f"ü§î Feels like: {feels_like}{temp_unit}\n"
            f"üíß Humidity: {humidity}%\n"
            f"üìä Pressure: {pressure} hPa\n"
            f"üí® Wind: {wind_speed:.1f} {speed_unit} {wind_dir}\n"
            f"‚òÅÔ∏è Cloudiness: {clouds}%\n"
        )
        
        if visibility:
            message += f"üëÅÔ∏è Visibility: {visibility:.1f} km\n"
        
        message += (
            f"üìù Conditions: {description}\n\n"
            f"üåÖ Sunrise: {sunrise}\n"
            f"üåá Sunset: {sunset}"
        )
        
        return message
    
    def format_forecast_message(self, data, prefs: UserPreferences):
        """Format 5-day forecast data"""
        city = data['city']['name']
        country = data['city']['country']
        
        unit_symbol = "¬∞C" if prefs.unit == "metric" else "¬∞F"
        
        message = f"üìä <b>5-Day Forecast for {city}, {country}</b>\n\n"
        
        # Group forecasts by day
        daily_forecasts = {}
        for item in data['list']:
            date = datetime.fromtimestamp(item['dt']).date()
            if date not in daily_forecasts:
                daily_forecasts[date] = []
            daily_forecasts[date].append(item)
        
        # Process up to 5 days
        for i, (date, forecasts) in enumerate(list(daily_forecasts.items())[:5]):
            day_name = date.strftime('%A')
            date_str = date.strftime('%m/%d')
            
            # Get min/max temperatures for the day
            temps = [f['main']['temp'] for f in forecasts]
            min_temp = min(temps)
            max_temp = max(temps)
            
            # Get most common weather condition
            conditions = [f['weather'][0] for f in forecasts]
            main_condition = max(set(c['main'] for c in conditions), 
                               key=[c['main'] for c in conditions].count)
            
            # Find representative weather ID for emoji
            weather_ids = [c['id'] for c in conditions if c['main'] == main_condition]
            representative_id = weather_ids[0] if weather_ids else conditions[0]['id']
            
            emoji = self.get_weather_emoji(representative_id)
            
            # Get precipitation probability if available
            pop = max([f.get('pop', 0) for f in forecasts]) * 100
            
            message += f"{emoji} <b>{day_name} ({date_str})</b>\n"
            message += f"   üå°Ô∏è {min_temp:.0f}{unit_symbol} - {max_temp:.0f}{unit_symbol}"
            
            if pop > 20:
                message += f" | üåßÔ∏è {pop:.0f}%"
            
            message += f"\n   üìù {main_condition}\n\n"
        
        return message
    
    def get_weather_emoji(self, weather_id):
        """Get appropriate emoji for weather condition"""
        if weather_id < 300:
            return "‚õàÔ∏è"  # Thunderstorm
        elif weather_id < 400:
            return "üå¶Ô∏è"  # Drizzle
        elif weather_id < 600:
            return "üåßÔ∏è"  # Rain
        elif weather_id < 700:
            return "‚ùÑÔ∏è"  # Snow
        elif weather_id < 800:
            return "üå´Ô∏è"  # Atmosphere (fog, mist, etc.)
        elif weather_id == 800:
            return "‚òÄÔ∏è"  # Clear sky
        else:
            return "‚òÅÔ∏è"  # Clouds
    
    def run(self):
        """Start the bot"""
        print("üöÄ Starting Enhanced Weather Bot...")
        print(f"üìä Loaded preferences for {len(self.user_preferences)} users")
        self.application.run_polling()

# Error handler
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle errors"""
    logger.warning(f'Update "{update}" caused error "{context.error}"')

if __name__ == '__main__':
    try:
        # Create and run the bot
        bot = WeatherBot()
        bot.application.add_error_handler(error_handler)
        bot.run()
    except KeyboardInterrupt:
        print("\nüõë Bot stopped by user")
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        print(f"‚ùå Error: {e}")
</file>

</files>
